module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    //manual testing use INPUT 
    input x[1],
    input y[1],
    input cin[1]
    
    //FSM testing use OUTPUT
    /*output x[1],
    output y[1],
    output cin[1]*/
  ) {
  
  sig rst;                  // reset signal
  full_adder fulladder;
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
     
    .rst(rst) {
      multi_seven_seg seg;
    }
  }
   
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));
  full_adder_FSM fulladderFSM(.clk(slowclock.value), .rst(rst));
  three_bit_display_led threebitdisplayled(.clk(slowclock.value), .rst(rst));
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    //manual testing code
    seg.values = {1b0,x[0],y[0],cin[0]};
    io_seg = ~seg.seg;   // connect segments to counter
    io_sel = ~seg.sel; // connect digit select to counter
    //for manual input of ABCin
    fulladder.x = x[0];
    fulladder.y = y[0];
    fulladder.cin = cin[0];
    //led display for Sum & Cout
    io_led[0][0] = fulladder.s;
    io_led[0][1] = fulladder.cout;
    
    
    //FSM tester code
    /*seg.values = {1b0,threebitdisplayled.out[2],threebitdisplayled.out[1],threebitdisplayled.out[0]};
    io_seg = ~seg.seg;   // connect segments to counter
    io_sel = ~seg.sel; // connect digit select to counter
    
    //for fsm input of ABCin
    x[0] = threebitdisplayled.out[2];
    y[0] = threebitdisplayled.out[1];
    cin[0] = threebitdisplayled.out[0];
    
    //displays current value of ABCin
    io_led[0] = threebitdisplayled.out;
       
    //displays current value of Sum & Cout
    io_led[1] = fulladderFSM.out;8*/
    
  }
}